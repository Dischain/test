const zlib  = require('zlib')
	, fs    = require('fs')
    , util  = require('../util')
	, cache = require('../cache'); // - кеш для сжатых данных

// Util:
// function capitalizeFirst (str) { return str.charAt(0).toUpperCase() + str.slice(1); }
// function getZlibFuncByEncoding (encoding) { return 'create' + capitalizeFirst(encoding); }
// function getFullPath (req, root) {
	// это вып. при инициализации: const publicDir = path.normalize(path.resolve(root));
//	const pathName = path.normalize(url.parse(req.url).pathname)
//	return path.join(root, pathName);
// }

const defaultOpts = {
	flush: zlib.constants.Z_NO_FLUSH,
	memlevel: zlib.constants.Z_BEST_COMPRESSION,
	strategy: zlib.constants.Z_DEFAULT_STRATEGY
};

// If we are here, then file already exists
function sendCompressedFile(req, res, opts, cache) {
	const path     = util.getFullPath(req)
	    , encoding = getEncoding(req)
	    , options  = opts ? opts : defaultOpts
	    , zlibFunc = zlib.[getZlibFuncByEncoding(encoding)]

	res.writeHead(200, {'Content-Encoding': encoding});
	
	if (cache.get(path)) {
		pipeTo(cache.get(path), res, zlibFunc);
	} else {
		require('stream-to').buffer(fs.createReadStream(path), (err, buffer) => {
			cache.set(path, buffer);
			pipeTo(buffer, res, zlibFunc);
		})
	}
}

function pipeTo(buffer, writable, func) {
	fs.createReadStream(buffer)
			.pipe(func.call(null))
			.pipe(writable);
}
